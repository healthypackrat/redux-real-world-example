{"version":3,"sources":["containers/Root.js","store/configureStore.js","index.js","actions/index.js","components/Explore.js","containers/App.js","components/User.js","components/Repo.js","components/List.js","containers/UserPage.js","containers/RepoPage.js","containers/Root.dev.js","reducers/paginate.js","reducers/index.js","store/configureStore.dev.js","containers/DevTools.js","middleware/api.js"],"names":["module","exports","require","store","configureStore","render","document","getElementById","fetchUser","login","CALL_API","types","endpoint","schema","Schemas","USER","loadUser","requiredFields","dispatch","getState","user","entities","users","every","key","hasOwnProperty","fetchRepo","fullName","REPO","loadRepo","repo","repos","STARRED_REQUEST","STARRED_SUCCESS","STARRED_FAILURE","loadStarred","nextPage","pagination","starredByUser","nextPageUrl","pageCount","REPO_ARRAY","fetchStarred","STARGAZERS_REQUEST","STARGAZERS_SUCCESS","STARGAZERS_FAILURE","loadStargazers","stargazersByRepo","USER_ARRAY","fetchStargazers","RESET_ERROR_MESSAGE","resetErrorMessage","type","Explore","getInputValue","input","value","setInputValue","val","handleKeyUp","e","keyCode","handleGoClick","props","onChange","prevProps","this","size","ref","defaultValue","onKeyUp","onClick","href","target","rel","Component","App","handleDismissClick","preventDefault","handleChange","nextValue","history","push","errorMessage","style","backgroundColor","padding","children","inputValue","renderErrorMessage","withRouter","connect","state","ownProps","location","pathname","substring","User","avatarUrl","name","className","to","src","alt","width","height","Repo","owner","description","List","isFetching","onLoadMoreClick","fontSize","disabled","items","renderItem","loadingLabel","isEmpty","length","isLastPage","map","renderLoadMore","defaultProps","loadData","UserPage","handleLoadMoreClick","starredRepos","starredRepoOwners","starredPagination","renderRepo","zip","match","params","toLowerCase","ids","id","RepoPage","stargazers","stargazersPagination","renderUser","Root","path","component","DevTools","paginate","mapActionToKey","Array","isArray","Error","t","requestType","successType","failureType","updatePagination","undefined","action","union","response","result","combineReducers","ActionTypes","rootReducer","merge","error","preloadedState","createStore","compose","applyMiddleware","thunk","api","createLogger","instrument","createDevTools","toggleVisibilityKey","changePositionKey","userSchema","Entity","idAttribute","repoSchema","next","callAPI","actionWith","data","finalAction","Object","assign","fullUrl","indexOf","fetch","then","json","ok","Promise","reject","camelizedJson","camelizeKeys","link","headers","get","nextLink","split","find","s","trim","slice","getNextPageUrl","normalize","callApi","message"],"mappings":"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","file":"static/js/main.ba49ead7.chunk.js","sourcesContent":["// if (process.env.NODE_ENV === 'production') {\n//   module.exports = require('./Root.prod')\n// } else {\n//   module.exports = require('./Root.dev')\n// }\n\nmodule.exports = require('./Root.dev')\n","// if (process.env.NODE_ENV === 'production') {\n//   module.exports = require('./configureStore.prod')\n// } else {\n//   module.exports = require('./configureStore.dev')\n// }\n\nmodule.exports = require('./configureStore.dev')\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { HashRouter as Router } from 'react-router-dom'\nimport Root from './containers/Root'\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\n\nrender(\n  <Router>\n    <Root store={store} />\n  </Router>,\n  document.getElementById('root')\n)\n","import { CALL_API, Schemas } from '../middleware/api'\n\nexport const USER_REQUEST = 'USER_REQUEST'\nexport const USER_SUCCESS = 'USER_SUCCESS'\nexport const USER_FAILURE = 'USER_FAILURE'\n\n// Fetches a single user from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchUser = login => ({\n  [CALL_API]: {\n    types: [ USER_REQUEST, USER_SUCCESS, USER_FAILURE ],\n    endpoint: `users/${login}`,\n    schema: Schemas.USER\n  }\n})\n\n// Fetches a single user from Github API unless it is cached.\n// Relies on Redux Thunk middleware.\nexport const loadUser = (login, requiredFields = []) => (dispatch, getState) => {\n  const user = getState().entities.users[login]\n  if (user && requiredFields.every(key => user.hasOwnProperty(key))) {\n    return null\n  }\n\n  return dispatch(fetchUser(login))\n}\n\nexport const REPO_REQUEST = 'REPO_REQUEST'\nexport const REPO_SUCCESS = 'REPO_SUCCESS'\nexport const REPO_FAILURE = 'REPO_FAILURE'\n\n// Fetches a single repository from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchRepo = fullName => ({\n  [CALL_API]: {\n    types: [ REPO_REQUEST, REPO_SUCCESS, REPO_FAILURE ],\n    endpoint: `repos/${fullName}`,\n    schema: Schemas.REPO\n  }\n})\n\n// Fetches a single repository from Github API unless it is cached.\n// Relies on Redux Thunk middleware.\nexport const loadRepo = (fullName, requiredFields = []) => (dispatch, getState) => {\n  const repo = getState().entities.repos[fullName]\n  if (repo && requiredFields.every(key => repo.hasOwnProperty(key))) {\n    return null\n  }\n\n  return dispatch(fetchRepo(fullName))\n}\n\nexport const STARRED_REQUEST = 'STARRED_REQUEST'\nexport const STARRED_SUCCESS = 'STARRED_SUCCESS'\nexport const STARRED_FAILURE = 'STARRED_FAILURE'\n\n// Fetches a page of starred repos by a particular user.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchStarred = (login, nextPageUrl) => ({\n  login,\n  [CALL_API]: {\n    types: [ STARRED_REQUEST, STARRED_SUCCESS, STARRED_FAILURE ],\n    endpoint: nextPageUrl,\n    schema: Schemas.REPO_ARRAY\n  }\n})\n\n// Fetches a page of starred repos by a particular user.\n// Bails out if page is cached and user didn't specifically request next page.\n// Relies on Redux Thunk middleware.\nexport const loadStarred = (login, nextPage) => (dispatch, getState) => {\n  const {\n    nextPageUrl = `users/${login}/starred`,\n    pageCount = 0\n  } = getState().pagination.starredByUser[login] || {}\n\n  if (pageCount > 0 && !nextPage) {\n    return null\n  }\n\n  return dispatch(fetchStarred(login, nextPageUrl))\n}\n\nexport const STARGAZERS_REQUEST = 'STARGAZERS_REQUEST'\nexport const STARGAZERS_SUCCESS = 'STARGAZERS_SUCCESS'\nexport const STARGAZERS_FAILURE = 'STARGAZERS_FAILURE'\n\n// Fetches a page of stargazers for a particular repo.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchStargazers = (fullName, nextPageUrl) => ({\n  fullName,\n  [CALL_API]: {\n    types: [ STARGAZERS_REQUEST, STARGAZERS_SUCCESS, STARGAZERS_FAILURE ],\n    endpoint: nextPageUrl,\n    schema: Schemas.USER_ARRAY\n  }\n})\n\n// Fetches a page of stargazers for a particular repo.\n// Bails out if page is cached and user didn't specifically request next page.\n// Relies on Redux Thunk middleware.\nexport const loadStargazers = (fullName, nextPage) => (dispatch, getState) => {\n  const {\n    nextPageUrl = `repos/${fullName}/stargazers`,\n    pageCount = 0\n  } = getState().pagination.stargazersByRepo[fullName] || {}\n\n  if (pageCount > 0 && !nextPage) {\n    return null\n  }\n\n  return dispatch(fetchStargazers(fullName, nextPageUrl))\n}\n\nexport const RESET_ERROR_MESSAGE = 'RESET_ERROR_MESSAGE'\n\n// Resets the currently visible error message.\nexport const resetErrorMessage = () => ({\n    type: RESET_ERROR_MESSAGE\n})\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GITHUB_REPO = 'https://github.com/reduxjs/redux'\n\nexport default class Explore extends Component {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.value !== this.props.value) {\n      this.setInputValue(this.props.value)\n    }\n  }\n\n  getInputValue = () => {\n    return this.input.value\n  }\n\n  setInputValue = (val) => {\n    // Generally mutating DOM is a bad idea in React components,\n    // but doing this for a single uncontrolled field is less fuss\n    // than making it controlled and maintaining a state for it.\n    this.input.value = val\n  }\n\n  handleKeyUp = (e) => {\n    if (e.keyCode === 13) {\n      this.handleGoClick()\n    }\n  }\n\n  handleGoClick = () => {\n    this.props.onChange(this.getInputValue())\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Type a username or repo full name and hit 'Go':</p>\n        <input size=\"45\"\n               ref={(input) => this.input = input}\n               defaultValue={this.props.value}\n               onKeyUp={this.handleKeyUp} />\n        <button onClick={this.handleGoClick}>\n          Go!\n        </button>\n        <p>\n          Code on <a href={GITHUB_REPO} target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.\n        </p>\n        <p>\n          Move the DevTools with Ctrl+W or hide them with Ctrl+H.\n        </p>\n      </div>\n    )\n  }\n}\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Explore from '../components/Explore'\nimport { resetErrorMessage } from '../actions'\n\nclass App extends Component {\n  static propTypes = {\n    // Injected by React Redux\n    errorMessage: PropTypes.string,\n    resetErrorMessage: PropTypes.func.isRequired,\n    inputValue: PropTypes.string.isRequired,\n    // Injected by React Router\n    children: PropTypes.node\n  }\n\n  handleDismissClick = e => {\n    this.props.resetErrorMessage()\n    e.preventDefault()\n  }\n\n  handleChange = nextValue => {\n    this.props.history.push(`/${nextValue}`)\n  }\n\n  renderErrorMessage() {\n    const { errorMessage } = this.props\n    if (!errorMessage) {\n      return null\n    }\n\n    return (\n      <p style={{ backgroundColor: '#e99', padding: 10 }}>\n        <b>{errorMessage}</b>\n        {' '}\n        <button onClick={this.handleDismissClick}>\n          Dismiss\n        </button>\n      </p>\n    )\n  }\n\n  render() {\n    const { children, inputValue } = this.props\n    return (\n      <div>\n        <Explore value={inputValue}\n                 onChange={this.handleChange} />\n        <hr />\n        {this.renderErrorMessage()}\n        {children}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  errorMessage: state.errorMessage,\n  inputValue: ownProps.location.pathname.substring(1)\n})\n\nexport default withRouter(connect(mapStateToProps, {\n  resetErrorMessage\n})(App))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nconst User = ({ user }) => {\n  const { login, avatarUrl, name } = user\n\n  return (\n    <div className=\"User\">\n      <Link to={`/${login}`}>\n        <img src={avatarUrl} alt={login} width=\"72\" height=\"72\" />\n        <h3>\n          {login} {name && <span>({name})</span>}\n        </h3>\n      </Link>\n    </div>\n  )\n}\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    login: PropTypes.string.isRequired,\n    avatarUrl: PropTypes.string.isRequired,\n    name: PropTypes.string\n  }).isRequired\n}\n\nexport default User\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nconst Repo = ({ repo, owner }) => {\n  const { login } = owner\n  const { name, description } = repo\n\n  return (\n    <div className=\"Repo\">\n      <h3>\n        <Link to={`/${login}/${name}`}>\n          {name}\n        </Link>\n        {' by '}\n        <Link to={`/${login}`}>\n          {login}\n        </Link>\n      </h3>\n      {description &&\n        <p>{description}</p>\n      }\n    </div>\n  )\n}\n\nRepo.propTypes = {\n  repo: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string\n  }).isRequired,\n  owner: PropTypes.shape({\n    login: PropTypes.string.isRequired\n  }).isRequired\n}\n\nexport default Repo\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class List extends Component {\n  static propTypes = {\n    loadingLabel: PropTypes.string.isRequired,\n    pageCount: PropTypes.number,\n    renderItem: PropTypes.func.isRequired,\n    items: PropTypes.array.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    onLoadMoreClick: PropTypes.func.isRequired,\n    nextPageUrl: PropTypes.string\n  }\n\n  static defaultProps = {\n    isFetching: true,\n    loadingLabel: 'Loading...'\n  }\n\n  renderLoadMore() {\n    const { isFetching, onLoadMoreClick } = this.props\n    return (\n      <button style={{ fontSize: '150%' }}\n              onClick={onLoadMoreClick}\n              disabled={isFetching}>\n        {isFetching ? 'Loading...' : 'Load More'}\n      </button>\n    )\n  }\n\n  render() {\n    const {\n      isFetching, nextPageUrl, pageCount,\n      items, renderItem, loadingLabel\n    } = this.props\n\n    const isEmpty = items.length === 0\n    if (isEmpty && isFetching) {\n      return <h2><i>{loadingLabel}</i></h2>\n    }\n\n    const isLastPage = !nextPageUrl\n    if (isEmpty && isLastPage) {\n      return <h1><i>Nothing here!</i></h1>\n    }\n\n    return (\n      <div>\n        {items.map(renderItem)}\n        {pageCount > 0 && !isLastPage && this.renderLoadMore()}\n      </div>\n    )\n  }\n}\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { loadUser, loadStarred } from '../actions'\nimport User from '../components/User'\nimport Repo from '../components/Repo'\nimport List from '../components/List'\nimport zip from 'lodash/zip'\n\nconst loadData = ({ login, loadUser, loadStarred }) => {\n  loadUser(login, [ 'name' ])\n  loadStarred(login)\n}\n\nclass UserPage extends Component {\n  static propTypes = {\n    login: PropTypes.string.isRequired,\n    user: PropTypes.object,\n    starredPagination: PropTypes.object,\n    starredRepos: PropTypes.array.isRequired,\n    starredRepoOwners: PropTypes.array.isRequired,\n    loadUser: PropTypes.func.isRequired,\n    loadStarred: PropTypes.func.isRequired\n  }\n\n  componentDidMount() {\n    loadData(this.props)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.login !== this.props.login) {\n      loadData(this.props)\n    }\n  }\n\n  handleLoadMoreClick = () => {\n    this.props.loadStarred(this.props.login, true)\n  }\n\n  renderRepo([ repo, owner ]) {\n    return (\n      <Repo\n        repo={repo}\n        owner={owner}\n        key={repo.fullName} />\n    )\n  }\n\n  render() {\n    const { user, login } = this.props\n    if (!user) {\n      return <h1><i>Loading {login}{\"'s profile...\"}</i></h1>\n    }\n\n    const { starredRepos, starredRepoOwners, starredPagination } = this.props\n    return (\n      <div>\n        <User user={user} />\n        <hr />\n        <List renderItem={this.renderRepo}\n              items={zip(starredRepos, starredRepoOwners)}\n              onLoadMoreClick={this.handleLoadMoreClick}\n              loadingLabel={`Loading ${login}'s starred...`}\n              {...starredPagination} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // We need to lower case the login due to the way GitHub's API behaves.\n  // Have a look at ../middleware/api.js for more details.\n  const login = ownProps.match.params.login.toLowerCase()\n\n  const {\n    pagination: { starredByUser },\n    entities: { users, repos }\n  } = state\n\n  const starredPagination = starredByUser[login] || { ids: [] }\n  const starredRepos = starredPagination.ids.map(id => repos[id])\n  const starredRepoOwners = starredRepos.map(repo => users[repo.owner])\n\n  return {\n    login,\n    starredRepos,\n    starredRepoOwners,\n    starredPagination,\n    user: users[login]\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, {\n  loadUser,\n  loadStarred\n})(UserPage))\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { loadRepo, loadStargazers } from '../actions'\nimport Repo from '../components/Repo'\nimport User from '../components/User'\nimport List from '../components/List'\n\nconst loadData = props => {\n  const { fullName } = props\n  props.loadRepo(fullName, [ 'description' ])\n  props.loadStargazers(fullName)\n}\n\nclass RepoPage extends Component {\n  static propTypes = {\n    repo: PropTypes.object,\n    fullName: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    owner: PropTypes.object,\n    stargazers: PropTypes.array.isRequired,\n    stargazersPagination: PropTypes.object,\n    loadRepo: PropTypes.func.isRequired,\n    loadStargazers: PropTypes.func.isRequired\n  }\n\n  componentDidMount() {\n    loadData(this.props)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.fullName !== this.props.fullName) {\n      loadData(this.props)\n    }\n  }\n\n  handleLoadMoreClick = () => {\n    this.props.loadStargazers(this.props.fullName, true)\n  }\n\n  renderUser(user) {\n    return <User user={user} key={user.login} />\n  }\n\n  render() {\n    const { repo, owner, name } = this.props\n    if (!repo || !owner) {\n      return <h1><i>Loading {name} details...</i></h1>\n    }\n\n    const { stargazers, stargazersPagination } = this.props\n    return (\n      <div>\n        <Repo repo={repo}\n              owner={owner} />\n        <hr />\n        <List renderItem={this.renderUser}\n              items={stargazers}\n              onLoadMoreClick={this.handleLoadMoreClick}\n              loadingLabel={`Loading stargazers of ${name}...`}\n              {...stargazersPagination} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // We need to lower case the login/name due to the way GitHub's API behaves.\n  // Have a look at ../middleware/api.js for more details.\n  const login = ownProps.match.params.login.toLowerCase()\n  const name = ownProps.match.params.name.toLowerCase()\n\n  const {\n    pagination: { stargazersByRepo },\n    entities: { users, repos }\n  } = state\n\n  const fullName = `${login}/${name}`\n  const stargazersPagination = stargazersByRepo[fullName] || { ids: [] }\n  const stargazers = stargazersPagination.ids.map(id => users[id])\n\n  return {\n    fullName,\n    name,\n    stargazers,\n    stargazersPagination,\n    repo: repos[fullName],\n    owner: users[login]\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, {\n  loadRepo,\n  loadStargazers\n})(RepoPage))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Provider } from 'react-redux'\nimport DevTools from './DevTools'\nimport { Route } from 'react-router-dom'\nimport App from './App'\nimport UserPage from './UserPage'\nimport RepoPage from './RepoPage'\n\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    <div>\n      <Route path=\"/\" component={App} />\n      <Route path=\"/:login/:name\"\n             component={RepoPage} />\n      <Route path=\"/:login\"\n             component={UserPage} />\n      <DevTools />\n    </div>\n  </Provider>\n)\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n}\n\nexport default Root\n","import union from 'lodash/union'\n\n// Creates a reducer managing pagination, given the action types to handle,\n// and a function telling how to extract the key from an action.\nconst paginate = ({ types, mapActionToKey }) => {\n  if (!Array.isArray(types) || types.length !== 3) {\n    throw new Error('Expected types to be an array of three elements.')\n  }\n  if (!types.every(t => typeof t === 'string')) {\n    throw new Error('Expected types to be strings.')\n  }\n  if (typeof mapActionToKey !== 'function') {\n    throw new Error('Expected mapActionToKey to be a function.')\n  }\n\n  const [ requestType, successType, failureType ] = types\n\n  const updatePagination = (state = {\n    isFetching: false,\n    nextPageUrl: undefined,\n    pageCount: 0,\n    ids: []\n  }, action) => {\n    switch (action.type) {\n      case requestType:\n        return {\n          ...state,\n          isFetching: true\n        }\n      case successType:\n        return {\n          ...state,\n          isFetching: false,\n          ids: union(state.ids, action.response.result),\n          nextPageUrl: action.response.nextPageUrl,\n          pageCount: state.pageCount + 1\n        }\n      case failureType:\n        return {\n          ...state,\n          isFetching: false\n        }\n      default:\n        return state\n    }\n  }\n\n  return (state = {}, action) => {\n    // Update pagination by key\n    switch (action.type) {\n      case requestType:\n      case successType:\n      case failureType:\n        const key = mapActionToKey(action)\n        if (typeof key !== 'string') {\n          throw new Error('Expected key to be a string.')\n        }\n        return {\n          ...state,\n          [key]: updatePagination(state[key], action)\n        }\n      default:\n        return state\n    }\n  }\n}\n\nexport default paginate\n","import * as ActionTypes from '../actions'\nimport merge from 'lodash/merge'\nimport paginate from './paginate'\nimport { combineReducers } from 'redux'\n\n// Updates an entity cache in response to any action with response.entities.\nconst entities = (state = { users: {}, repos: {} }, action) => {\n  if (action.response && action.response.entities) {\n    return merge({}, state, action.response.entities)\n  }\n\n  return state\n}\n\n// Updates error message to notify about the failed fetches.\nconst errorMessage = (state = null, action) => {\n  const { type, error } = action\n\n  if (type === ActionTypes.RESET_ERROR_MESSAGE) {\n    return null\n  } else if (error) {\n    return error\n  }\n\n  return state\n}\n\n// Updates the pagination data for different actions.\nconst pagination = combineReducers({\n  starredByUser: paginate({\n    mapActionToKey: action => action.login,\n    types: [\n      ActionTypes.STARRED_REQUEST,\n      ActionTypes.STARRED_SUCCESS,\n      ActionTypes.STARRED_FAILURE\n    ]\n  }),\n  stargazersByRepo: paginate({\n    mapActionToKey: action => action.fullName,\n    types: [\n      ActionTypes.STARGAZERS_REQUEST,\n      ActionTypes.STARGAZERS_SUCCESS,\n      ActionTypes.STARGAZERS_FAILURE\n    ]\n  })\n})\n\nconst rootReducer = combineReducers({\n  entities,\n  pagination,\n  errorMessage,\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport api from '../middleware/api'\nimport rootReducer from '../reducers'\nimport DevTools from '../containers/DevTools'\n\nconst configureStore = preloadedState => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    compose(\n      applyMiddleware(thunk, api, createLogger()),\n      DevTools.instrument()\n    )\n  )\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      store.replaceReducer(rootReducer)\n    })\n  }\n\n  return store\n}\n\nexport default configureStore\n","import React from 'react'\nimport { createDevTools } from 'redux-devtools'\nimport LogMonitor from 'redux-devtools-log-monitor'\nimport DockMonitor from 'redux-devtools-dock-monitor'\n\nexport default createDevTools(\n  <DockMonitor toggleVisibilityKey=\"ctrl-h\"\n               changePositionKey=\"ctrl-w\">\n    <LogMonitor />\n  </DockMonitor>\n)\n","import { normalize, schema } from 'normalizr'\nimport { camelizeKeys } from 'humps'\n\n// Extracts the next page URL from Github API response.\nconst getNextPageUrl = response => {\n  const link = response.headers.get('link')\n  if (!link) {\n    return null\n  }\n\n  const nextLink = link.split(',').find(s => s.indexOf('rel=\"next\"') > -1)\n  if (!nextLink) {\n    return null\n  }\n\n  return nextLink.trim().split(';')[0].slice(1, -1)\n}\n\nconst API_ROOT = 'https://api.github.com/'\n\n// Fetches an API response and normalizes the result JSON according to schema.\n// This makes every API response have the same shape, regardless of how nested it was.\nconst callApi = (endpoint, schema) => {\n  const fullUrl = (endpoint.indexOf(API_ROOT) === -1) ? API_ROOT + endpoint : endpoint\n\n  return fetch(fullUrl)\n    .then(response =>\n      response.json().then(json => {\n        if (!response.ok) {\n          return Promise.reject(json)\n        }\n\n        const camelizedJson = camelizeKeys(json)\n        const nextPageUrl = getNextPageUrl(response)\n\n        return Object.assign({},\n          normalize(camelizedJson, schema),\n          { nextPageUrl }\n        )\n      })\n    )\n}\n\n// We use this Normalizr schemas to transform API responses from a nested form\n// to a flat form where repos and users are placed in `entities`, and nested\n// JSON objects are replaced with their IDs. This is very convenient for\n// consumption by reducers, because we can easily build a normalized tree\n// and keep it updated as we fetch more data.\n\n// Read more about Normalizr: https://github.com/paularmstrong/normalizr\n\n// GitHub's API may return results with uppercase letters while the query\n// doesn't contain any. For example, \"someuser\" could result in \"SomeUser\"\n// leading to a frozen UI as it wouldn't find \"someuser\" in the entities.\n// That's why we're forcing lower cases down there.\n\nconst userSchema = new schema.Entity('users', {}, {\n  idAttribute: user => user.login.toLowerCase()\n})\n\nconst repoSchema = new schema.Entity('repos', {\n  owner: userSchema\n}, {\n  idAttribute: repo => repo.fullName.toLowerCase()\n})\n\n// Schemas for Github API responses.\nexport const Schemas = {\n  USER: userSchema,\n  USER_ARRAY: [userSchema],\n  REPO: repoSchema,\n  REPO_ARRAY: [repoSchema]\n}\n\n// Action key that carries API call info interpreted by this Redux middleware.\nexport const CALL_API = 'Call API'\n\n// A Redux middleware that interprets actions with CALL_API info specified.\n// Performs the call and promises when such actions are dispatched.\nexport default store => next => action => {\n  const callAPI = action[CALL_API]\n  if (typeof callAPI === 'undefined') {\n    return next(action)\n  }\n\n  let { endpoint } = callAPI\n  const { schema, types } = callAPI\n\n  if (typeof endpoint === 'function') {\n    endpoint = endpoint(store.getState())\n  }\n\n  if (typeof endpoint !== 'string') {\n    throw new Error('Specify a string endpoint URL.')\n  }\n  if (!schema) {\n    throw new Error('Specify one of the exported Schemas.')\n  }\n  if (!Array.isArray(types) || types.length !== 3) {\n    throw new Error('Expected an array of three action types.')\n  }\n  if (!types.every(type => typeof type === 'string')) {\n    throw new Error('Expected action types to be strings.')\n  }\n\n  const actionWith = data => {\n    const finalAction = Object.assign({}, action, data)\n    delete finalAction[CALL_API]\n    return finalAction\n  }\n\n  const [ requestType, successType, failureType ] = types\n  next(actionWith({ type: requestType }))\n\n  return callApi(endpoint, schema).then(\n    response => next(actionWith({\n      response,\n      type: successType\n    })),\n    error => next(actionWith({\n      type: failureType,\n      error: error.message || 'Something bad happened'\n    }))\n  )\n}\n"],"sourceRoot":""}